/**********************************************************************************************************************
Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the
specific language governing permissions and limitations under the License.   
 **********************************************************************************************************************/
import { Coordinate, Dimension, ResourceTag, SolutionObjectBase } from './base';
import { ShipmentItem, ShipmentContainer } from './shipment';

/**
 * Specified how each item should be packed into a container.
 */
export interface PackingItem {
  /**
   * A logical Id generated by the application representing each individual item.
   */
  Id: string;
  /**
   * The Id of the item type of the item.
   */
  itemTypeId: string;
  /**
   * The logical Id of the container. See type <i>PackingContainer</id>.
   */
  packingContainerId: string;
  /**
   * The coordinate of the item inside the assigned container - The coordinate is the central point of the item related to the central point of the container.
   */
  coordinates: Coordinate;
  /**
   * The packing dimension of the item given that the item can be rotated. <br/>
   * This can be the same as the dimension specified in the item type and <br/>
   * it can be different given that the item can be rotated.
   */
  packingDimension: Dimension;
}

/*
Keeps track of the items that could not be packed in a manifest.
  */
export interface UnpackedItem {
  Id: string;
  /**
   * The Id of the item type of the item.
   */
  itemTypeId: string;

  /**
   * The number of items that could not be packed.
   */
  quantity: number;
}

/**
 * The data used to displayed a packing item in the UI.
 */
export interface DisplayPackingItem extends PackingItem {
  /**
   * The color used in presenting the packing item in the 3D visualization. The data is generated in UI.
   */
  color: string;
}

/**
 * Specifies each individual container used in the packing solution.
 */
export interface PackingContainer {
  /**
   * A logical Id generated by the application representing each individual container.
   */
  Id: string;
  /**
   * The Id of the container type of the container.
   */
  containerTypeId: string;
  /**
   * Allow user to tag the container. For example, it can be used to keep the plate number of the container.
   */
  tags?: ResourceTag[];
  /**
   * The percent of the total volume that this container has been packed to.
   */
  packedPercent: number;
}

/**
 * Specifies a packing solution for a shipment based on a version of shipment spec (items + containers). <br/>
 * All the data used to calculate the packing solutionfrom shipment is copied over to this object.
 */
export interface Manifest {
  /**
   * Id of the Manifest
   */
  Id?: string;
  /**
   * The DateTime when the calculation is triggered
   */
  createdAt?: Date;
  /**
   * The DateTime when the manifest is updated.
   */
  updatedAt?: Date;
  /**
   * The associated shipment
   */
  shipmentId: string;
  /**
   * The status of packing calculation
   */
  status: ManifestStatus;
  /**
   * The mapping between container logical Id (generated by the packing solution) and container Type Id
   */
  packingContainers?: PackingContainer[];
  /**
   * Specified how items are packed.
   */
  packingItems?: PackingItem[];

  /*
  Specify the items that could not be packed.
   */
  unpackedItems?: UnpackedItem[];
  /**
   * The calucated total cost of the packing solution.
   */
  totalCost?: number;
  /**
   * The hard score from packing calculation.
   */
  hardScore?: number;
  /**
   * The hard score from packing calculation.
   */
  softScore?: number;
  /**
   * The shipment items spec used in the calculation.
   */
  items: ShipmentItem[];
  /**
   * The shipment containers spec used in the calculation.
   */
  containers: ShipmentContainer[];
  /**
   * The key that the results JSON file is saved in S3.
   */
  resultsS3Key?: string;

  /**
   * The name of the solver used to compute this manifest.
   */
  solverLambdaName?: string;
}

export type ManifestStatus = 'Processing' | 'Complete' | 'Error';
